using BEQuestionBank.Core.Configurations;
using Microsoft.EntityFrameworkCore;
using BEQuestionBank.API.Extensions;
using Serilog;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddControllers(); // ‚úÖ C·∫ßn c√≥ ƒë·ªÉ Swagger hi·ªÉn th·ªã API
builder.Services.AddEndpointsApiExplorer(); // ‚úÖ Cho minimal APIs
builder.Services.AddSwaggerGen(); // ‚úÖ C·∫•u h√¨nh Swagger

// Add DbContext
builder.Services.AddDbContext<AppDbContext>(options =>
    options.UseNpgsql(
        builder.Configuration.GetConnectionString("PostgresConnection"),
        x => x.MigrationsAssembly("BEQuestionBank.Core") // üëà Th√™m d√≤ng n√†y
    ));

// C·∫•u h√¨nh CORS
builder.Services.AddCors(options =>
{
    options.AddPolicy("AllowFrontend",
        policy =>
        {
            policy.WithOrigins("http://localhost:5173") // ‚úÖ ƒê√∫ng port React
                .AllowAnyHeader()
                .AllowAnyMethod()
                .AllowCredentials(); // n·∫øu d√πng cookie ho·∫∑c auth
        });
});
builder.Services.AddSingleton<string>(provider => "wwwroot/uploads");
// C·∫•u h√¨nh Log
Log.Logger = new LoggerConfiguration()
    .ReadFrom.Configuration(builder.Configuration)
    .CreateLogger();
builder.Host.UseSerilog();

// G·ªçi extension t·ª´ Core
builder.Services.AddCoreServices();

// B·∫≠t annotation Swagger
builder.Services.AddSwaggerGen(c =>
{
    c.EnableAnnotations();
});

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger(); // ‚úÖ B·∫Øt bu·ªôc
    app.UseSwaggerUI(); // ‚úÖ B·∫Øt bu·ªôc
}

app.UseCors("AllowFrontend");

app.UseHttpsRedirection();

app.UseAuthorization();

app.MapControllers(); 

app.Run();